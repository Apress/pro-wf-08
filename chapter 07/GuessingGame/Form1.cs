//--------------------------------------------------------------------------------
// This file is part of the downloadable code for the Apress book:
// Pro WF: Windows Workflow in .NET 3.5
// Copyright (c) Bruce Bukovics.  All rights reserved.
//
// This code is provided as is without warranty of any kind, either expressed
// or implied, including but not limited to fitness for any particular purpose. 
// You may use the code for any commercial or noncommercial purpose, and combine 
// it with your own code, but cannot reproduce it in whole or in part for 
// publication purposes without prior approval. 
//--------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using System.Workflow.Activities;
using System.Workflow.Runtime;

using Bukovics.Workflow.Hosting;
using SharedWorkflows;

namespace GuessingGame
{
    /// <summary>
    /// The WinForm for the number guessing game
    /// </summary>
#if USEQUEUES
    public partial class Form1 : Form, ISendMessageService
#else
    public partial class Form1 : Form
#endif
    {
        private WorkflowRuntimeManager _workflowManager;
        private Guid _instanceId = Guid.Empty;
#if USEQUEUES
        private WorkflowInstanceWrapper _instanceWrapper;

        //remove the _gameService variable
#else
        private GuessingGameService _gameService;
#endif
        public Form1()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            //create workflow runtime and manager
            _workflowManager = new WorkflowRuntimeManager(
                new WorkflowRuntime());
#if USEQUEUES
            //add ourself as a workflow service. This allows workflow
            //instances to retrieve a direct reference to us and call 
            //the SendMessage method.
            _workflowManager.WorkflowRuntime.AddService(this);
#else
            //add the external data exchange service to the runtime
            ExternalDataExchangeService exchangeService
                = new ExternalDataExchangeService();
            _workflowManager.WorkflowRuntime.AddService(exchangeService);

            //add our local service 
            _gameService = new GuessingGameService();
            exchangeService.AddService(_gameService);

            //subscribe to the service event that sends us messages
            _gameService.MessageReceived
                += new EventHandler<MessageReceivedEventArgs>(
                    gameService_MessageReceived);
#endif
            //handle the terminated event
            _workflowManager.WorkflowRuntime.WorkflowTerminated
                += new EventHandler<WorkflowTerminatedEventArgs>(
                    WorkflowRuntime_WorkflowTerminated);
        }

        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            base.OnFormClosed(e);
            //cleanup the workflow runtime
            if (_workflowManager != null)
            {
                _workflowManager.Dispose();
            }
        }

        private void btnStart_Click(object sender, EventArgs e)
        {
#if USEQUEUES
            //start the workflow that uses queues for communication
            _instanceWrapper = _workflowManager.StartWorkflow(
                typeof(QueueGuessingGameWorkflow), null);

            //start the workflow that uses queues but does not use
            //EventDrivenActivity
            //_instanceWrapper = _workflowManager.StartWorkflow(
            //    typeof(QueueGuessingGameWorkflow2), null);
#else
            //start the workflow without any parameters
            _workflowManager.StartWorkflow(
                typeof(GuessingGameWorkflow), null);
#endif
            //start the workflow that uses custom activities
            //generated by the WCA utility
            //_workflowManager.StartWorkflow(
            //    typeof(GuessingGameWcaWorkflow), null);

            btnGuess.Enabled = true;
        }

        private void btnGuess_Click(object sender, EventArgs e)
        {
            //pass the guess to the running workflow
            try
            {
                Int32 nextGuess = Int32.Parse(txtNextNumber.Text);
#if USEQUEUES
                //pass the guess to the workflow using the guess queue. 
                _instanceWrapper.WorkflowInstance.EnqueueItem(
                    "GuessQueue", nextGuess, null, null);
#else
                //raise the GuessReceived event in the game service
                _gameService.OnGuessReceived(
                    new GuessReceivedEventArgs(_instanceId, nextGuess));
#endif
            }
            catch (FormatException)
            {
                MessageBox.Show("Could not parse the number");
            }
            catch (OverflowException)
            {
                MessageBox.Show("The number exceeded the allowed limits");
            }
#if USEQUEUES
            catch (InvalidOperationException)
#else
            catch (EventDeliveryFailedException)
#endif
            {
                MessageBox.Show(
                    "Your guess was not delivered.\n\rStart a new game.",
                    "Game Ended", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
            }
        }

        private delegate void UpdateDelegate();

#if USEQUEUES
        //gameService_MessageReceived method removed

        #region IQueueGuessingGameHost Members

        /// <summary>
        /// Invoked by a workflow instance to pass us a message
        /// </summary>
        /// <param name="message"></param>
        public void SendMessage(string message)
        {
            UpdateDelegate theDelegate = delegate()
            {
                //update the UI with the message
                lblMessage.Text = message;
                txtNextNumber.SelectAll();
                txtNextNumber.Focus();
            };

            //execute the anonymous delegate on the UI thread
            this.Invoke(theDelegate);
        }

        #endregion
#else
        private void gameService_MessageReceived(object sender,
            MessageReceivedEventArgs e)
        {
            UpdateDelegate theDelegate = delegate()
            {
                //update the UI with the message
                lblMessage.Text = e.Message;
                txtNextNumber.SelectAll();
                txtNextNumber.Focus();
            };

            //save the workflow instance Id. we will need it
            //when we make the return trip with a guess.
            _instanceId = e.InstanceId;

            //execute the anonymous delegate on the UI thread
            this.Invoke(theDelegate);
        }
#endif
        void WorkflowRuntime_WorkflowTerminated(object sender,
            WorkflowTerminatedEventArgs e)
        {
            MessageBox.Show(
                "Sorry, but the time expired since your last guess.",
                "Start a New Game", MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
    }
}